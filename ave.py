import telebot
import json
from telebot import types
import threading
import schedule
import time

token = '7162546131:AAE3mTOo4U9jRBJcSIPbJOvwOGyBvujkLHM'
user = ["hvru", 718189301]

bot = telebot.TeleBot(token)

tasks = {
    'pickup': False,
    'sadhu': False,
    'cold shower': False,
    'lku at 12:00': False,
    'lku at 15:00': False,
    'lku at 18:00': False
}

habit_emojis = {
    "pickup": "üôÜ‚Äç‚ôÇÔ∏è",
    "sadhu": "üßò‚Äç‚ôÇÔ∏è",
    "cold shower": "üöø",
    "lku at 12:00": "üïõ",
    "lku at 15:00": "üïí",
    "lku at 18:00": "üïï"
}

def modify_habit_data(task_name, update_func):
    with open('data.json', 'r') as file:
        data = json.load(file)
    for habit in data['habits']:
        if habit['name'] == task_name:
            update_func(habit)
            break
    with open('data.json', 'w') as file:
        json.dump(data, file, indent=4)

def update_maxstreak(task_name):
    def update(habit):
        if habit['current_streak'] > habit['max_streak']:
            habit['max_streak'] = habit['current_streak']
    modify_habit_data(task_name, update)

def reset_streak(task_name):
    def update(habit):
        if tasks[task_name] == False:
            habit['current_streak'] = 0
    modify_habit_data(task_name, update)

def increment_streak(task_name):
    def update(habit):
        habit['total_count'] += 1
        habit['current_streak'] += 1
    modify_habit_data(task_name, update)

def reset_daily_tasks():
    global tasks
    for task_name in tasks:
        reset_streak(task_name)
        tasks[task_name] = False
    bot.send_message(user[1], "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–∏–ª–∏—Å—å!")


def lku_notification():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True).add(
        types.KeyboardButton("Seiday")
    )
    bot.send_message(user[1], "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π!\n\n–ü–æ–¥–Ω—è—Ç–∏—è –Ω–∞ –Ω–æ—Å–∫–∏: 30 —Ä–∞–∑\n–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è: 15 —Ä–∞–∑\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ö–µ–≥–µ–ª—è: 100 —Ä–∞–∑", reply_markup=keyboard)

def schedule_task():
    schedule.every().day.at("00:00", "Asia/Almaty").do(reset_daily_tasks)
    times = ["12:00", "15:00", "18:00"]
    for time in times:
        schedule.every().day.at(time, "Asia/Almaty").do(lku_notification)

def poll_bot():
    while True:
        bot.infinity_polling()

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

main_keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True).add(
    types.KeyboardButton("Seiday"),
    types.KeyboardButton("Soloway"),
    types.KeyboardButton("Halt")
)

@bot.message_handler(commands=["start"])
def start(message):
    if message.chat.id == user[1]:
        bot.send_message(message.chat.id, "Ave. üïäÔ∏è\n\nAvenue - —Ç–≤–æ–π —Å–æ–ª–æ–≤–µ–π –ø—Ä–æ—Ç–∏–≤ —Ç–µ—á–µ–Ω–∏—è.\n\n–í —ç—Ç–æ–º —á–∞—Ç–µ —è —Ç–≤–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥, —Å–ø—É—Ç–Ω–∏–∫, –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, –∫—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –≤–µ—Ä–∏—Ç –≤ —Ç–µ–±—è! ‚ò∫Ô∏è", reply_markup=main_keyboard)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.")

@bot.message_handler(content_types=["text"])
def handle_text(message):
    if message.chat.id == user[1]:
        if message.text.lower() == "halt":
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True).add(
            types.KeyboardButton("Seiday"),
            types.KeyboardButton("Soloway")
            )
            bot.send_message(message.chat.id, "Ave. üïäÔ∏è\n\nAvenue - —Ç–≤–æ–π —Å–æ–ª–æ–≤–µ–π –ø—Ä–æ—Ç–∏–≤ —Ç–µ—á–µ–Ω–∏—è.\n\n–¢—ã –Ω–∞—á–∞–ª —ç—Ç–æ—Ç –ø—É—Ç—å 13.04.2024 üìÜ\n–ò —è —Ö–æ—á—É –≤–∏–¥–µ—Ç—å —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –≥–æ–¥!\n\n–í —ç—Ç–æ–º —á–∞—Ç–µ —è —Ç–≤–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥, —Å–ø—É—Ç–Ω–∏–∫, –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, –∫—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –≤–µ—Ä–∏—Ç –≤ —Ç–µ–±—è! ‚ò∫Ô∏è", reply_markup=keyboard)

        elif message.text.lower() == "seiday":
            active_tasks = [f"{task_name}" for task_name, done in tasks.items() if not done]
            done_tasks = [f"{habit_emojis.get(task_name.lower(), '')} {task_name.capitalize()}" for task_name, done in tasks.items() if done]


            keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
            buttons = [types.KeyboardButton(task_name.capitalize()) for task_name in active_tasks]
            buttons.append(types.KeyboardButton("Halt"))
            keyboard.add(*buttons)

            pattern = "–û—Ç–ª–∏—á–Ω–æ! ‚ò∫Ô∏è\n\n–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
            main_message = '–ï—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å —Å–æ–ª–æ–≤–µ–π! ‚òÄÔ∏èüïäÔ∏è\n\n' if active_tasks else pattern
            if main_message == pattern:
                done_tasks_message = ''
            elif done_tasks:
                done_tasks_message = '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n' + '\n'.join(done_tasks)
            else:
                done_tasks_message = "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –µ—â–µ –Ω–µ—Ç. ‚åõ"

            bot.send_message(
                message.chat.id,
                f"{main_message}{done_tasks_message}",
                reply_markup=keyboard
            )

        elif message.text.lower() in tasks.keys():
            task_name = message.text.lower()

            for task_name_dict, done in tasks.items():
                if task_name_dict.lower() == task_name and done:
                    bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. ü§®", reply_markup=main_keyboard)
                    return

            bot.send_message(user[1], f"{task_name.capitalize()} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. üôå\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! üïäÔ∏è", reply_markup=main_keyboard)

            increment_streak(task_name)
            update_maxstreak(task_name)

            for task_name_dict in tasks.keys():
                if task_name_dict.lower() == message.text.lower():
                    tasks[task_name] = True
                    break

        elif message.text.lower() == "soloway":
            keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True).add(
                types.KeyboardButton("Halt")
            )
            with open('data.json', 'r') as file:
                data = json.load(file)
            stat_message = "Soloway üïäÔ∏è:\n\n–¢–≤–æ—è –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä\n\n–ò –∑–∞–ø–æ–º–Ω–∏, –≤–∞–∂–µ–Ω –Ω–µ —Å—Ç—Ä–∏–∫,\n–≤–∞–∂–Ω–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å. ‚û∞\n\n"
            for habit in data['habits']:
                emoji = habit_emojis.get(habit['name'].lower(), "‚ùì")
                stat_message += f"____{emoji} {habit['name'].capitalize()} {emoji}:____\n"
                stat_message += f"üåÄ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {habit['total_count']},\n"
                stat_message += f"‚òÑÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–∫: {habit['max_streak']},\n"
                stat_message += f"üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {habit['current_streak']}\n\n"
            bot.send_message(message.chat.id, stat_message, reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.")

if __name__ == '__main__':
    bot.send_message(user[1], "–í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! ü§î")

    schedule_task_thread = threading.Thread(target=schedule_task)
    schedule_task_thread.start()

    bot_thread = threading.Thread(target=poll_bot)
    bot_thread.start()

    run_schedule()
